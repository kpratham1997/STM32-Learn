
stm32homeautomation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a74  08003a74  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001bc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008bcb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001951  00000000  00000000  00028ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000788  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b6  00000000  00000000  0002ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e33  00000000  00000000  0002b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000092cb  00000000  00000000  0004c169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c46e6  00000000  00000000  00055434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000250c  00000000  00000000  00119b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0011c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039fc 	.word	0x080039fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080039fc 	.word	0x080039fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000578:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d013      	beq.n	80005ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800058c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00b      	beq.n	80005ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	e000      	b.n	8000598 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000596:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f9      	beq.n	8000596 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e009      	b.n	80005e4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffc7 	bl	800056c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf1      	blt.n	80005d0 <_write+0x16>
  return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fac4 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f84e 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8e0 	bl	80007c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f8b4 	bl	8000774 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1);
 800060c:	2201      	movs	r2, #1
 800060e:	491f      	ldr	r1, [pc, #124]	; (800068c <main+0x94>)
 8000610:	481f      	ldr	r0, [pc, #124]	; (8000690 <main+0x98>)
 8000612:	f001 fb91 	bl	8001d38 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(huart1.Instance==USART1)
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <main+0x98>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <main+0x9c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d1fa      	bne.n	8000616 <main+0x1e>
	    {
	  	printf("VALUE= %d\n",rxData);
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0x94>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0xa0>)
 8000628:	f002 fb76 	bl	8002d18 <iprintf>
	      if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <main+0x94>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b4e      	cmp	r3, #78	; 0x4e
 8000632:	d110      	bne.n	8000656 <main+0x5e>
	      {

	      	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <main+0xa4>)
 800063c:	f000 fe7a 	bl	8001334 <HAL_GPIO_WritePin>
	      	HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 fb12 	bl	8000c6c <HAL_Delay>
	      	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <main+0xa4>)
 8000650:	f000 fe70 	bl	8001334 <HAL_GPIO_WritePin>
 8000654:	e013      	b.n	800067e <main+0x86>
	      }
	      else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <main+0x94>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b59      	cmp	r3, #89	; 0x59
 800065c:	d10f      	bne.n	800067e <main+0x86>
	      {
	      	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,1);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <main+0xa4>)
 8000666:	f000 fe65 	bl	8001334 <HAL_GPIO_WritePin>
	      	HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fafd 	bl	8000c6c <HAL_Delay>
	      	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <main+0xa4>)
 800067a:	f000 fe5b 	bl	8001334 <HAL_GPIO_WritePin>
	      }
	      HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 800067e:	2201      	movs	r2, #1
 8000680:	4902      	ldr	r1, [pc, #8]	; (800068c <main+0x94>)
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0x98>)
 8000684:	f001 fb58 	bl	8001d38 <HAL_UART_Receive_IT>
	  if(huart1.Instance==USART1)
 8000688:	e7c5      	b.n	8000616 <main+0x1e>
 800068a:	bf00      	nop
 800068c:	20000084 	.word	0x20000084
 8000690:	20000088 	.word	0x20000088
 8000694:	40011000 	.word	0x40011000
 8000698:	08003a14 	.word	0x08003a14
 800069c:	40020c00 	.word	0x40020c00

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fb44 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000714:	23a8      	movs	r3, #168	; 0xa8
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe1f 	bl	8001368 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f8b4 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f880 	bl	8001858 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 f89d 	bl	800089c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART1_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007ac:	f001 fa74 	bl	8001c98 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f871 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000088 	.word	0x20000088
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0xc8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <MX_GPIO_Init+0xc8>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0xc8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_GPIO_Init+0xc8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_GPIO_Init+0xc8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <MX_GPIO_Init+0xcc>)
 800083a:	f000 fd7b 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000846:	f000 fd75 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_GPIO_Init+0xcc>)
 8000864:	f000 fbca 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000882:	f000 fbbb 	bl	8000ffc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020000 	.word	0x40020000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f000 fab4 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_UART_MspInit+0x94>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d134      	bne.n	8000984 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x98>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_UART_MspInit+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_UART_MspInit+0x9c>)
 8000970:	f000 fb44 	bl	8000ffc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2025      	movs	r0, #37	; 0x25
 800097a:	f000 fa76 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	; 0x25
 8000980:	f000 fa8f 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40011000 	.word	0x40011000
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f922 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <USART1_IRQHandler+0x10>)
 80009f2:	f001 f9c7 	bl	8001d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000088 	.word	0x20000088

08000a00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e00a      	b.n	8000a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a12:	f3af 8000 	nop.w
 8000a16:	4601      	mov	r1, r0
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf0      	blt.n	8000a12 <_read+0x12>
  }

  return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a62:	605a      	str	r2, [r3, #4]
  return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_isatty>:

int _isatty(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f002 f93a 	bl	8002d4c <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000d0 	.word	0x200000d0
 8000b0c:	20000228 	.word	0x20000228

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 f8f9 	bl	8002d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fd47 	bl	80005f8 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b78:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8000b7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b80:	20000224 	.word	0x20000224

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f94f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe74 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f967 	bl	8000ebe <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 f92f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000d4 	.word	0x200000d4

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000d4 	.word	0x200000d4

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff feb6 	bl	8000c54 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d008      	beq.n	8000f08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e052      	b.n	8000fae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0216 	bic.w	r2, r2, #22
 8000f16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <HAL_DMA_Abort+0x62>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0208 	bic.w	r2, r2, #8
 8000f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0201 	bic.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f58:	e013      	b.n	8000f82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5a:	f7ff fe7b 	bl	8000c54 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d90c      	bls.n	8000f82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e015      	b.n	8000fae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e4      	bne.n	8000f5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	223f      	movs	r2, #63	; 0x3f
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d004      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00c      	b.n	8000fee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	; (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	; (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e267      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	2b08      	cmp	r3, #8
 800139c:	d112      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e242      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6c      	ldr	r2, [pc, #432]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a68      	ldr	r2, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc18 	bl	8000c54 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc14 	bl	8000c54 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e207      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fc04 	bl	8000c54 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc00 	bl	8000c54 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1f3      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c7      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fbb9 	bl	8000c54 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fbb5 	bl	8000c54 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a8      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fb98 	bl	8000c54 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fb94 	bl	8000c54 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e187      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d036      	beq.n	80015c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d016      	beq.n	8001588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb78 	bl	8000c54 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fb74 	bl	8000c54 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e167      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
 8001586:	e01b      	b.n	80015c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb61 	bl	8000c54 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	e00e      	b.n	80015b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fb5d 	bl	8000c54 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d907      	bls.n	80015b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e150      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470000 	.word	0x42470000
 80015b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ea      	bne.n	8001596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8097 	beq.w	80016fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b74      	ldr	r3, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a73      	ldr	r2, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb1d 	bl	8000c54 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fb19 	bl	8000c54 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e10c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x2ea>
 8001644:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	e01c      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x30c>
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5b      	ldr	r2, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001674:	4b58      	ldr	r3, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0304 	bic.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fade 	bl	8000c54 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fada 	bl	8000c54 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0cb      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0ee      	beq.n	800169c <HAL_RCC_OscConfig+0x334>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fac8 	bl	8000c54 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fac4 	bl	8000c54 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e0b5      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ee      	bne.n	80016c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a38      	ldr	r2, [pc, #224]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a1 	beq.w	8001848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d05c      	beq.n	80017cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d141      	bne.n	800179e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fa98 	bl	8000c54 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa94 	bl	8000c54 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e087      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fa6d 	bl	8000c54 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fa69 	bl	8000c54 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e05c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x416>
 800179c:	e054      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fa56 	bl	8000c54 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fa52 	bl	8000c54 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e045      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x444>
 80017ca:	e03d      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e038      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000
 80017e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4ec>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d028      	beq.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d121      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11a      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800181a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	4293      	cmp	r3, r2
 800181e:	d111      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0cc      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d90c      	bls.n	8001894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d044      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e067      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff f984 	bl	8000c54 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f980 	bl	8000c54 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d20c      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f8e4 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08003a20 	.word	0x08003a20
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b094      	sub	sp, #80	; 0x50
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a30:	2300      	movs	r3, #0
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	f200 80e1 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e0db      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a5c:	e0db      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e0d8      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	0159      	lsls	r1, r3, #5
 8001aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa8:	0150      	lsls	r0, r2, #5
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4621      	mov	r1, r4
 8001ab0:	1a51      	subs	r1, r2, r1
 8001ab2:	6139      	str	r1, [r7, #16]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	018b      	lsls	r3, r1, #6
 8001acc:	4651      	mov	r1, sl
 8001ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	018a      	lsls	r2, r1, #6
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8001adc:	4659      	mov	r1, fp
 8001ade:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	eb18 0303 	adds.w	r3, r8, r3
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	462b      	mov	r3, r5
 8001b04:	eb49 0303 	adc.w	r3, r9, r3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b16:	4629      	mov	r1, r5
 8001b18:	024b      	lsls	r3, r1, #9
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b20:	4621      	mov	r1, r4
 8001b22:	024a      	lsls	r2, r1, #9
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b34:	f7fe fb9c 	bl	8000270 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b40:	e058      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0159      	lsls	r1, r3, #5
 8001b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6e:	0150      	lsls	r0, r2, #5
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4641      	mov	r1, r8
 8001b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b94:	ebb2 040a 	subs.w	r4, r2, sl
 8001b98:	eb63 050b 	sbc.w	r5, r3, fp
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	00eb      	lsls	r3, r5, #3
 8001ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001baa:	00e2      	lsls	r2, r4, #3
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	18e3      	adds	r3, r4, r3
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	028b      	lsls	r3, r1, #10
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	028a      	lsls	r2, r1, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	61fa      	str	r2, [r7, #28]
 8001be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be8:	f7fe fb42 	bl	8000270 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08003a30 	.word	0x08003a30

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c74:	f7ff ffdc 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0b5b      	lsrs	r3, r3, #13
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08003a30 	.word	0x08003a30

08001c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e042      	b.n	8001d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fe1a 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fce5 	bl	80026ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	4613      	mov	r3, r2
 8001d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d112      	bne.n	8001d78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_Receive_IT+0x26>
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00b      	b.n	8001d7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fac4 	bl	80022fc <UART_Start_Receive_IT>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e000      	b.n	8001d7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0ba      	sub	sp, #232	; 0xe8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10f      	bne.n	8001dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <HAL_UART_IRQHandler+0x66>
 8001dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fba3 	bl	800252e <UART_Receive_IT>
      return;
 8001de8:	e25b      	b.n	80022a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80de 	beq.w	8001fb0 <HAL_UART_IRQHandler+0x22c>
 8001df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80d1 	beq.w	8001fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_UART_IRQHandler+0xae>
 8001e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_UART_IRQHandler+0xd2>
 8001e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_UART_IRQHandler+0xf6>
 8001e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0204 	orr.w	r2, r3, #4
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d011      	beq.n	8001eaa <HAL_UART_IRQHandler+0x126>
 8001e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f043 0208 	orr.w	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 81f2 	beq.w	8002298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x14e>
 8001ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb2e 	bl	800252e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_UART_IRQHandler+0x17a>
 8001ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d04f      	beq.n	8001f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa36 	bl	8002370 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	2b40      	cmp	r3, #64	; 0x40
 8001f10:	d141      	bne.n	8001f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3314      	adds	r3, #20
 8001f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f20:	e853 3f00 	ldrex	r3, [r3]
 8001f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3314      	adds	r3, #20
 8001f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f4e:	e841 2300 	strex	r3, r2, [r1]
 8001f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1d9      	bne.n	8001f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <HAL_UART_IRQHandler+0x3e0>)
 8001f6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f81f 	bl	8000fb6 <HAL_DMA_Abort_IT>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8c:	e00e      	b.n	8001fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f99e 	bl	80022d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f94:	e00a      	b.n	8001fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f99a 	bl	80022d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	e006      	b.n	8001fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f996 	bl	80022d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001faa:	e175      	b.n	8002298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fac:	bf00      	nop
    return;
 8001fae:	e173      	b.n	8002298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 814f 	bne.w	8002258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8148 	beq.w	8002258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8141 	beq.w	8002258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	f040 80b6 	bne.w	8002168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8145 	beq.w	800229c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800201a:	429a      	cmp	r2, r3
 800201c:	f080 813e 	bcs.w	800229c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002026:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	f000 8088 	beq.w	8002146 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800204c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800206e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800207a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1d9      	bne.n	8002036 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3314      	adds	r3, #20
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208c:	e853 3f00 	ldrex	r3, [r3]
 8002090:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3314      	adds	r3, #20
 80020a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e1      	bne.n	8002082 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3314      	adds	r3, #20
 80020c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c8:	e853 3f00 	ldrex	r3, [r3]
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3314      	adds	r3, #20
 80020de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020ea:	e841 2300 	strex	r3, r2, [r1]
 80020ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e3      	bne.n	80020be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	e853 3f00 	ldrex	r3, [r3]
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	f023 0310 	bic.w	r3, r3, #16
 800211a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002128:	65ba      	str	r2, [r7, #88]	; 0x58
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800212e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002130:	e841 2300 	strex	r3, r2, [r1]
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e3      	bne.n	8002104 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fec8 	bl	8000ed6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002154:	b29b      	uxth	r3, r3
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	b29b      	uxth	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f8c1 	bl	80022e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002162:	e09b      	b.n	800229c <HAL_UART_IRQHandler+0x518>
 8002164:	08002437 	.word	0x08002437
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002170:	b29b      	uxth	r3, r3
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 808e 	beq.w	80022a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8089 	beq.w	80022a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	330c      	adds	r3, #12
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	e853 3f00 	ldrex	r3, [r3]
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021b2:	647a      	str	r2, [r7, #68]	; 0x44
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e3      	bne.n	800218e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3314      	adds	r3, #20
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	e853 3f00 	ldrex	r3, [r3]
 80021d4:	623b      	str	r3, [r7, #32]
   return(result);
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3314      	adds	r3, #20
 80021e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021ea:	633a      	str	r2, [r7, #48]	; 0x30
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	e841 2300 	strex	r3, r2, [r1]
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e3      	bne.n	80021c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	e853 3f00 	ldrex	r3, [r3]
 800221a:	60fb      	str	r3, [r7, #12]
   return(result);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0310 	bic.w	r3, r3, #16
 8002222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002234:	69b9      	ldr	r1, [r7, #24]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	e841 2300 	strex	r3, r2, [r1]
 800223c:	617b      	str	r3, [r7, #20]
   return(result);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e3      	bne.n	800220c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800224a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f847 	bl	80022e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002256:	e023      	b.n	80022a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_UART_IRQHandler+0x4f4>
 8002264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f8f4 	bl	800245e <UART_Transmit_IT>
    return;
 8002276:	e014      	b.n	80022a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_UART_IRQHandler+0x51e>
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f934 	bl	80024fe <UART_EndTransmit_IT>
    return;
 8002296:	e004      	b.n	80022a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002298:	bf00      	nop
 800229a:	e002      	b.n	80022a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800229c:	bf00      	nop
 800229e:	e000      	b.n	80022a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80022a0:	bf00      	nop
  }
}
 80022a2:	37e8      	adds	r7, #232	; 0xe8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2222      	movs	r2, #34	; 0x22
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002340:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0220 	orr.w	r2, r2, #32
 8002360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002370:	b480      	push	{r7}
 8002372:	b095      	sub	sp, #84	; 0x54
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	e853 3f00 	ldrex	r3, [r3]
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002398:	643a      	str	r2, [r7, #64]	; 0x40
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800239e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023a0:	e841 2300 	strex	r3, r2, [r1]
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e5      	bne.n	8002378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3314      	adds	r3, #20
 80023ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e5      	bne.n	80023ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f023 0310 	bic.w	r3, r3, #16
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002408:	61ba      	str	r2, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	6979      	ldr	r1, [r7, #20]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	613b      	str	r3, [r7, #16]
   return(result);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800242a:	bf00      	nop
 800242c:	3754      	adds	r7, #84	; 0x54
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff ff3d 	bl	80022d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b21      	cmp	r3, #33	; 0x21
 8002470:	d13e      	bne.n	80024f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	d114      	bne.n	80024a6 <UART_Transmit_IT+0x48>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d110      	bne.n	80024a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	1c9a      	adds	r2, r3, #2
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	621a      	str	r2, [r3, #32]
 80024a4:	e008      	b.n	80024b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6211      	str	r1, [r2, #32]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fec2 	bl	80022a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08c      	sub	sp, #48	; 0x30
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b22      	cmp	r3, #34	; 0x22
 8002540:	f040 80ae 	bne.w	80026a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d117      	bne.n	800257e <UART_Receive_IT+0x50>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256c:	b29a      	uxth	r2, r3
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	1c9a      	adds	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
 800257c:	e026      	b.n	80025cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d007      	beq.n	80025a2 <UART_Receive_IT+0x74>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <UART_Receive_IT+0x82>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e008      	b.n	80025c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d15d      	bne.n	800269c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0220 	bic.w	r2, r2, #32
 80025ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	2b01      	cmp	r3, #1
 8002624:	d135      	bne.n	8002692 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	330c      	adds	r3, #12
 8002632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	e853 3f00 	ldrex	r3, [r3]
 800263a:	613b      	str	r3, [r7, #16]
   return(result);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f023 0310 	bic.w	r3, r3, #16
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	623a      	str	r2, [r7, #32]
 800264e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002650:	69f9      	ldr	r1, [r7, #28]
 8002652:	6a3a      	ldr	r2, [r7, #32]
 8002654:	e841 2300 	strex	r3, r2, [r1]
 8002658:	61bb      	str	r3, [r7, #24]
   return(result);
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e5      	bne.n	800262c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d10a      	bne.n	8002684 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fe2a 	bl	80022e4 <HAL_UARTEx_RxEventCallback>
 8002690:	e002      	b.n	8002698 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fe12 	bl	80022bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e002      	b.n	80026a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3730      	adds	r7, #48	; 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0c0      	sub	sp, #256	; 0x100
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	ea40 0301 	orr.w	r3, r0, r1
 80026d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002704:	f021 010c 	bic.w	r1, r1, #12
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	ea40 0301 	orr.w	r3, r0, r1
 8002732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <UART_SetConfig+0x2cc>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0xa0>
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8d      	ldr	r3, [pc, #564]	; (800297c <UART_SetConfig+0x2d0>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d104      	bne.n	8002756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff fa90 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8002750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002754:	e003      	b.n	800275e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002756:	f7ff fa77 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 800275a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	f040 810c 	bne.w	8002984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800276c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002770:	2200      	movs	r2, #0
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800277a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	1891      	adds	r1, r2, r2
 8002784:	65b9      	str	r1, [r7, #88]	; 0x58
 8002786:	415b      	adcs	r3, r3
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800278a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800278e:	4621      	mov	r1, r4
 8002790:	eb12 0801 	adds.w	r8, r2, r1
 8002794:	4629      	mov	r1, r5
 8002796:	eb43 0901 	adc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027bc:	462b      	mov	r3, r5
 80027be:	eb49 0303 	adc.w	r3, r9, r3
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027da:	460b      	mov	r3, r1
 80027dc:	18db      	adds	r3, r3, r3
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
 80027e0:	4613      	mov	r3, r2
 80027e2:	eb42 0303 	adc.w	r3, r2, r3
 80027e6:	657b      	str	r3, [r7, #84]	; 0x54
 80027e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027f0:	f7fd fd3e 	bl	8000270 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <UART_SetConfig+0x2d4>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	011c      	lsls	r4, r3, #4
 8002802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800280c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	1891      	adds	r1, r2, r2
 800281a:	64b9      	str	r1, [r7, #72]	; 0x48
 800281c:	415b      	adcs	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002824:	4641      	mov	r1, r8
 8002826:	eb12 0a01 	adds.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0b01 	adc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800283c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	4692      	mov	sl, r2
 8002846:	469b      	mov	fp, r3
 8002848:	4643      	mov	r3, r8
 800284a:	eb1a 0303 	adds.w	r3, sl, r3
 800284e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002852:	464b      	mov	r3, r9
 8002854:	eb4b 0303 	adc.w	r3, fp, r3
 8002858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800286c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002870:	460b      	mov	r3, r1
 8002872:	18db      	adds	r3, r3, r3
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
 8002876:	4613      	mov	r3, r2
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
 800287e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002886:	f7fd fcf3 	bl	8000270 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <UART_SetConfig+0x2d4>)
 8002892:	fba3 2301 	umull	r2, r3, r3, r1
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2264      	movs	r2, #100	; 0x64
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <UART_SetConfig+0x2d4>)
 80028a8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028b4:	441c      	add	r4, r3
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80028d0:	415b      	adcs	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6339      	str	r1, [r7, #48]	; 0x30
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800292c:	460b      	mov	r3, r1
 800292e:	18db      	adds	r3, r3, r3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
 8002932:	4613      	mov	r3, r2
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800293e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002942:	f7fd fc95 	bl	8000270 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <UART_SetConfig+0x2d4>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	; 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <UART_SetConfig+0x2d4>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 0207 	and.w	r2, r3, #7
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4422      	add	r2, r4
 8002972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002974:	e106      	b.n	8002b84 <UART_SetConfig+0x4d8>
 8002976:	bf00      	nop
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800298e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002996:	4642      	mov	r2, r8
 8002998:	464b      	mov	r3, r9
 800299a:	1891      	adds	r1, r2, r2
 800299c:	6239      	str	r1, [r7, #32]
 800299e:	415b      	adcs	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a6:	4641      	mov	r1, r8
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb43 0501 	adc.w	r5, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029cc:	464b      	mov	r3, r9
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029f2:	4629      	mov	r1, r5
 80029f4:	008b      	lsls	r3, r1, #2
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fc:	4621      	mov	r1, r4
 80029fe:	008a      	lsls	r2, r1, #2
 8002a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a04:	f7fd fc34 	bl	8000270 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b60      	ldr	r3, [pc, #384]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	61b9      	str	r1, [r7, #24]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1851      	adds	r1, r2, r1
 8002a3c:	6139      	str	r1, [r7, #16]
 8002a3e:	4649      	mov	r1, r9
 8002a40:	414b      	adcs	r3, r1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a50:	4659      	mov	r1, fp
 8002a52:	00cb      	lsls	r3, r1, #3
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	00ca      	lsls	r2, r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	4642      	mov	r2, r8
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	460a      	mov	r2, r1
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aa2:	f7fd fbe5 	bl	8000270 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002aae:	fba3 2301 	umull	r2, r3, r3, r1
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2264      	movs	r2, #100	; 0x64
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b1e:	464b      	mov	r3, r9
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	663b      	str	r3, [r7, #96]	; 0x60
 8002b32:	667a      	str	r2, [r7, #100]	; 0x64
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b52:	f7fd fb8d 	bl	8000270 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <std>:
 8002b94:	2300      	movs	r3, #0
 8002b96:	b510      	push	{r4, lr}
 8002b98:	4604      	mov	r4, r0
 8002b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ba2:	6083      	str	r3, [r0, #8]
 8002ba4:	8181      	strh	r1, [r0, #12]
 8002ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ba8:	81c2      	strh	r2, [r0, #14]
 8002baa:	6183      	str	r3, [r0, #24]
 8002bac:	4619      	mov	r1, r3
 8002bae:	2208      	movs	r2, #8
 8002bb0:	305c      	adds	r0, #92	; 0x5c
 8002bb2:	f000 f8c3 	bl	8002d3c <memset>
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <std+0x58>)
 8002bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <std+0x5c>)
 8002bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <std+0x60>)
 8002bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <std+0x64>)
 8002bc4:	6323      	str	r3, [r4, #48]	; 0x30
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <std+0x68>)
 8002bc8:	6224      	str	r4, [r4, #32]
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d006      	beq.n	8002bdc <std+0x48>
 8002bce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002bd2:	4294      	cmp	r4, r2
 8002bd4:	d002      	beq.n	8002bdc <std+0x48>
 8002bd6:	33d0      	adds	r3, #208	; 0xd0
 8002bd8:	429c      	cmp	r4, r3
 8002bda:	d105      	bne.n	8002be8 <std+0x54>
 8002bdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be4:	f000 b8dc 	b.w	8002da0 <__retarget_lock_init_recursive>
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	bf00      	nop
 8002bec:	08003601 	.word	0x08003601
 8002bf0:	08003623 	.word	0x08003623
 8002bf4:	0800365b 	.word	0x0800365b
 8002bf8:	0800367f 	.word	0x0800367f
 8002bfc:	200000d8 	.word	0x200000d8

08002c00 <stdio_exit_handler>:
 8002c00:	4a02      	ldr	r2, [pc, #8]	; (8002c0c <stdio_exit_handler+0xc>)
 8002c02:	4903      	ldr	r1, [pc, #12]	; (8002c10 <stdio_exit_handler+0x10>)
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <stdio_exit_handler+0x14>)
 8002c06:	f000 b869 	b.w	8002cdc <_fwalk_sglue>
 8002c0a:	bf00      	nop
 8002c0c:	2000000c 	.word	0x2000000c
 8002c10:	08003599 	.word	0x08003599
 8002c14:	20000018 	.word	0x20000018

08002c18 <cleanup_stdio>:
 8002c18:	6841      	ldr	r1, [r0, #4]
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <cleanup_stdio+0x34>)
 8002c1c:	4299      	cmp	r1, r3
 8002c1e:	b510      	push	{r4, lr}
 8002c20:	4604      	mov	r4, r0
 8002c22:	d001      	beq.n	8002c28 <cleanup_stdio+0x10>
 8002c24:	f000 fcb8 	bl	8003598 <_fflush_r>
 8002c28:	68a1      	ldr	r1, [r4, #8]
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <cleanup_stdio+0x38>)
 8002c2c:	4299      	cmp	r1, r3
 8002c2e:	d002      	beq.n	8002c36 <cleanup_stdio+0x1e>
 8002c30:	4620      	mov	r0, r4
 8002c32:	f000 fcb1 	bl	8003598 <_fflush_r>
 8002c36:	68e1      	ldr	r1, [r4, #12]
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <cleanup_stdio+0x3c>)
 8002c3a:	4299      	cmp	r1, r3
 8002c3c:	d004      	beq.n	8002c48 <cleanup_stdio+0x30>
 8002c3e:	4620      	mov	r0, r4
 8002c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c44:	f000 bca8 	b.w	8003598 <_fflush_r>
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200000d8 	.word	0x200000d8
 8002c50:	20000140 	.word	0x20000140
 8002c54:	200001a8 	.word	0x200001a8

08002c58 <global_stdio_init.part.0>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <global_stdio_init.part.0+0x30>)
 8002c5c:	4c0b      	ldr	r4, [pc, #44]	; (8002c8c <global_stdio_init.part.0+0x34>)
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <global_stdio_init.part.0+0x38>)
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4620      	mov	r0, r4
 8002c64:	2200      	movs	r2, #0
 8002c66:	2104      	movs	r1, #4
 8002c68:	f7ff ff94 	bl	8002b94 <std>
 8002c6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002c70:	2201      	movs	r2, #1
 8002c72:	2109      	movs	r1, #9
 8002c74:	f7ff ff8e 	bl	8002b94 <std>
 8002c78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c82:	2112      	movs	r1, #18
 8002c84:	f7ff bf86 	b.w	8002b94 <std>
 8002c88:	20000210 	.word	0x20000210
 8002c8c:	200000d8 	.word	0x200000d8
 8002c90:	08002c01 	.word	0x08002c01

08002c94 <__sfp_lock_acquire>:
 8002c94:	4801      	ldr	r0, [pc, #4]	; (8002c9c <__sfp_lock_acquire+0x8>)
 8002c96:	f000 b884 	b.w	8002da2 <__retarget_lock_acquire_recursive>
 8002c9a:	bf00      	nop
 8002c9c:	20000215 	.word	0x20000215

08002ca0 <__sfp_lock_release>:
 8002ca0:	4801      	ldr	r0, [pc, #4]	; (8002ca8 <__sfp_lock_release+0x8>)
 8002ca2:	f000 b87f 	b.w	8002da4 <__retarget_lock_release_recursive>
 8002ca6:	bf00      	nop
 8002ca8:	20000215 	.word	0x20000215

08002cac <__sinit>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	f7ff fff0 	bl	8002c94 <__sfp_lock_acquire>
 8002cb4:	6a23      	ldr	r3, [r4, #32]
 8002cb6:	b11b      	cbz	r3, 8002cc0 <__sinit+0x14>
 8002cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cbc:	f7ff bff0 	b.w	8002ca0 <__sfp_lock_release>
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__sinit+0x28>)
 8002cc2:	6223      	str	r3, [r4, #32]
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <__sinit+0x2c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f5      	bne.n	8002cb8 <__sinit+0xc>
 8002ccc:	f7ff ffc4 	bl	8002c58 <global_stdio_init.part.0>
 8002cd0:	e7f2      	b.n	8002cb8 <__sinit+0xc>
 8002cd2:	bf00      	nop
 8002cd4:	08002c19 	.word	0x08002c19
 8002cd8:	20000210 	.word	0x20000210

08002cdc <_fwalk_sglue>:
 8002cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ce0:	4607      	mov	r7, r0
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cec:	f1b9 0901 	subs.w	r9, r9, #1
 8002cf0:	d505      	bpl.n	8002cfe <_fwalk_sglue+0x22>
 8002cf2:	6824      	ldr	r4, [r4, #0]
 8002cf4:	2c00      	cmp	r4, #0
 8002cf6:	d1f7      	bne.n	8002ce8 <_fwalk_sglue+0xc>
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	89ab      	ldrh	r3, [r5, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d907      	bls.n	8002d14 <_fwalk_sglue+0x38>
 8002d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	d003      	beq.n	8002d14 <_fwalk_sglue+0x38>
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4638      	mov	r0, r7
 8002d10:	47c0      	blx	r8
 8002d12:	4306      	orrs	r6, r0
 8002d14:	3568      	adds	r5, #104	; 0x68
 8002d16:	e7e9      	b.n	8002cec <_fwalk_sglue+0x10>

08002d18 <iprintf>:
 8002d18:	b40f      	push	{r0, r1, r2, r3}
 8002d1a:	b507      	push	{r0, r1, r2, lr}
 8002d1c:	4906      	ldr	r1, [pc, #24]	; (8002d38 <iprintf+0x20>)
 8002d1e:	ab04      	add	r3, sp, #16
 8002d20:	6808      	ldr	r0, [r1, #0]
 8002d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d26:	6881      	ldr	r1, [r0, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	f000 f865 	bl	8002df8 <_vfiprintf_r>
 8002d2e:	b003      	add	sp, #12
 8002d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d34:	b004      	add	sp, #16
 8002d36:	4770      	bx	lr
 8002d38:	20000064 	.word	0x20000064

08002d3c <memset>:
 8002d3c:	4402      	add	r2, r0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <__errno>:
 8002d4c:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <__errno+0x8>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000064 	.word	0x20000064

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	4d0d      	ldr	r5, [pc, #52]	; (8002d90 <__libc_init_array+0x38>)
 8002d5c:	4c0d      	ldr	r4, [pc, #52]	; (8002d94 <__libc_init_array+0x3c>)
 8002d5e:	1b64      	subs	r4, r4, r5
 8002d60:	10a4      	asrs	r4, r4, #2
 8002d62:	2600      	movs	r6, #0
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	4d0b      	ldr	r5, [pc, #44]	; (8002d98 <__libc_init_array+0x40>)
 8002d6a:	4c0c      	ldr	r4, [pc, #48]	; (8002d9c <__libc_init_array+0x44>)
 8002d6c:	f000 fe46 	bl	80039fc <_init>
 8002d70:	1b64      	subs	r4, r4, r5
 8002d72:	10a4      	asrs	r4, r4, #2
 8002d74:	2600      	movs	r6, #0
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	08003a74 	.word	0x08003a74
 8002d94:	08003a74 	.word	0x08003a74
 8002d98:	08003a74 	.word	0x08003a74
 8002d9c:	08003a78 	.word	0x08003a78

08002da0 <__retarget_lock_init_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_acquire_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <__retarget_lock_release_recursive>:
 8002da4:	4770      	bx	lr

08002da6 <__sfputc_r>:
 8002da6:	6893      	ldr	r3, [r2, #8]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	b410      	push	{r4}
 8002dae:	6093      	str	r3, [r2, #8]
 8002db0:	da08      	bge.n	8002dc4 <__sfputc_r+0x1e>
 8002db2:	6994      	ldr	r4, [r2, #24]
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	db01      	blt.n	8002dbc <__sfputc_r+0x16>
 8002db8:	290a      	cmp	r1, #10
 8002dba:	d103      	bne.n	8002dc4 <__sfputc_r+0x1e>
 8002dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dc0:	f000 bc61 	b.w	8003686 <__swbuf_r>
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	1c58      	adds	r0, r3, #1
 8002dc8:	6010      	str	r0, [r2, #0]
 8002dca:	7019      	strb	r1, [r3, #0]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <__sfputs_r>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	460f      	mov	r7, r1
 8002dda:	4614      	mov	r4, r2
 8002ddc:	18d5      	adds	r5, r2, r3
 8002dde:	42ac      	cmp	r4, r5
 8002de0:	d101      	bne.n	8002de6 <__sfputs_r+0x12>
 8002de2:	2000      	movs	r0, #0
 8002de4:	e007      	b.n	8002df6 <__sfputs_r+0x22>
 8002de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dea:	463a      	mov	r2, r7
 8002dec:	4630      	mov	r0, r6
 8002dee:	f7ff ffda 	bl	8002da6 <__sfputc_r>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d1f3      	bne.n	8002dde <__sfputs_r+0xa>
 8002df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002df8 <_vfiprintf_r>:
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	b09d      	sub	sp, #116	; 0x74
 8002e00:	4614      	mov	r4, r2
 8002e02:	4698      	mov	r8, r3
 8002e04:	4606      	mov	r6, r0
 8002e06:	b118      	cbz	r0, 8002e10 <_vfiprintf_r+0x18>
 8002e08:	6a03      	ldr	r3, [r0, #32]
 8002e0a:	b90b      	cbnz	r3, 8002e10 <_vfiprintf_r+0x18>
 8002e0c:	f7ff ff4e 	bl	8002cac <__sinit>
 8002e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e12:	07d9      	lsls	r1, r3, #31
 8002e14:	d405      	bmi.n	8002e22 <_vfiprintf_r+0x2a>
 8002e16:	89ab      	ldrh	r3, [r5, #12]
 8002e18:	059a      	lsls	r2, r3, #22
 8002e1a:	d402      	bmi.n	8002e22 <_vfiprintf_r+0x2a>
 8002e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e1e:	f7ff ffc0 	bl	8002da2 <__retarget_lock_acquire_recursive>
 8002e22:	89ab      	ldrh	r3, [r5, #12]
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	d501      	bpl.n	8002e2c <_vfiprintf_r+0x34>
 8002e28:	692b      	ldr	r3, [r5, #16]
 8002e2a:	b99b      	cbnz	r3, 8002e54 <_vfiprintf_r+0x5c>
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f000 fc66 	bl	8003700 <__swsetup_r>
 8002e34:	b170      	cbz	r0, 8002e54 <_vfiprintf_r+0x5c>
 8002e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e38:	07dc      	lsls	r4, r3, #31
 8002e3a:	d504      	bpl.n	8002e46 <_vfiprintf_r+0x4e>
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e40:	b01d      	add	sp, #116	; 0x74
 8002e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e46:	89ab      	ldrh	r3, [r5, #12]
 8002e48:	0598      	lsls	r0, r3, #22
 8002e4a:	d4f7      	bmi.n	8002e3c <_vfiprintf_r+0x44>
 8002e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e4e:	f7ff ffa9 	bl	8002da4 <__retarget_lock_release_recursive>
 8002e52:	e7f3      	b.n	8002e3c <_vfiprintf_r+0x44>
 8002e54:	2300      	movs	r3, #0
 8002e56:	9309      	str	r3, [sp, #36]	; 0x24
 8002e58:	2320      	movs	r3, #32
 8002e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e62:	2330      	movs	r3, #48	; 0x30
 8002e64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003018 <_vfiprintf_r+0x220>
 8002e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e6c:	f04f 0901 	mov.w	r9, #1
 8002e70:	4623      	mov	r3, r4
 8002e72:	469a      	mov	sl, r3
 8002e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e78:	b10a      	cbz	r2, 8002e7e <_vfiprintf_r+0x86>
 8002e7a:	2a25      	cmp	r2, #37	; 0x25
 8002e7c:	d1f9      	bne.n	8002e72 <_vfiprintf_r+0x7a>
 8002e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8002e82:	d00b      	beq.n	8002e9c <_vfiprintf_r+0xa4>
 8002e84:	465b      	mov	r3, fp
 8002e86:	4622      	mov	r2, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f7ff ffa2 	bl	8002dd4 <__sfputs_r>
 8002e90:	3001      	adds	r0, #1
 8002e92:	f000 80a9 	beq.w	8002fe8 <_vfiprintf_r+0x1f0>
 8002e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e98:	445a      	add	r2, fp
 8002e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8002e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80a1 	beq.w	8002fe8 <_vfiprintf_r+0x1f0>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eb0:	f10a 0a01 	add.w	sl, sl, #1
 8002eb4:	9304      	str	r3, [sp, #16]
 8002eb6:	9307      	str	r3, [sp, #28]
 8002eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8002ebe:	4654      	mov	r4, sl
 8002ec0:	2205      	movs	r2, #5
 8002ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec6:	4854      	ldr	r0, [pc, #336]	; (8003018 <_vfiprintf_r+0x220>)
 8002ec8:	f7fd f982 	bl	80001d0 <memchr>
 8002ecc:	9a04      	ldr	r2, [sp, #16]
 8002ece:	b9d8      	cbnz	r0, 8002f08 <_vfiprintf_r+0x110>
 8002ed0:	06d1      	lsls	r1, r2, #27
 8002ed2:	bf44      	itt	mi
 8002ed4:	2320      	movmi	r3, #32
 8002ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eda:	0713      	lsls	r3, r2, #28
 8002edc:	bf44      	itt	mi
 8002ede:	232b      	movmi	r3, #43	; 0x2b
 8002ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eea:	d015      	beq.n	8002f18 <_vfiprintf_r+0x120>
 8002eec:	9a07      	ldr	r2, [sp, #28]
 8002eee:	4654      	mov	r4, sl
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f04f 0c0a 	mov.w	ip, #10
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002efc:	3b30      	subs	r3, #48	; 0x30
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d94d      	bls.n	8002f9e <_vfiprintf_r+0x1a6>
 8002f02:	b1b0      	cbz	r0, 8002f32 <_vfiprintf_r+0x13a>
 8002f04:	9207      	str	r2, [sp, #28]
 8002f06:	e014      	b.n	8002f32 <_vfiprintf_r+0x13a>
 8002f08:	eba0 0308 	sub.w	r3, r0, r8
 8002f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	46a2      	mov	sl, r4
 8002f16:	e7d2      	b.n	8002ebe <_vfiprintf_r+0xc6>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	1d19      	adds	r1, r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	9103      	str	r1, [sp, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bfbb      	ittet	lt
 8002f24:	425b      	neglt	r3, r3
 8002f26:	f042 0202 	orrlt.w	r2, r2, #2
 8002f2a:	9307      	strge	r3, [sp, #28]
 8002f2c:	9307      	strlt	r3, [sp, #28]
 8002f2e:	bfb8      	it	lt
 8002f30:	9204      	strlt	r2, [sp, #16]
 8002f32:	7823      	ldrb	r3, [r4, #0]
 8002f34:	2b2e      	cmp	r3, #46	; 0x2e
 8002f36:	d10c      	bne.n	8002f52 <_vfiprintf_r+0x15a>
 8002f38:	7863      	ldrb	r3, [r4, #1]
 8002f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3c:	d134      	bne.n	8002fa8 <_vfiprintf_r+0x1b0>
 8002f3e:	9b03      	ldr	r3, [sp, #12]
 8002f40:	1d1a      	adds	r2, r3, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f4e:	3402      	adds	r4, #2
 8002f50:	9305      	str	r3, [sp, #20]
 8002f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003028 <_vfiprintf_r+0x230>
 8002f56:	7821      	ldrb	r1, [r4, #0]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4650      	mov	r0, sl
 8002f5c:	f7fd f938 	bl	80001d0 <memchr>
 8002f60:	b138      	cbz	r0, 8002f72 <_vfiprintf_r+0x17a>
 8002f62:	9b04      	ldr	r3, [sp, #16]
 8002f64:	eba0 000a 	sub.w	r0, r0, sl
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	4082      	lsls	r2, r0
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	3401      	adds	r4, #1
 8002f70:	9304      	str	r3, [sp, #16]
 8002f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f76:	4829      	ldr	r0, [pc, #164]	; (800301c <_vfiprintf_r+0x224>)
 8002f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	f7fd f927 	bl	80001d0 <memchr>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d03f      	beq.n	8003006 <_vfiprintf_r+0x20e>
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <_vfiprintf_r+0x228>)
 8002f88:	bb1b      	cbnz	r3, 8002fd2 <_vfiprintf_r+0x1da>
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	3308      	adds	r3, #8
 8002f94:	9303      	str	r3, [sp, #12]
 8002f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f98:	443b      	add	r3, r7
 8002f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9c:	e768      	b.n	8002e70 <_vfiprintf_r+0x78>
 8002f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	e7a6      	b.n	8002ef6 <_vfiprintf_r+0xfe>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	3401      	adds	r4, #1
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f04f 0c0a 	mov.w	ip, #10
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fba:	3a30      	subs	r2, #48	; 0x30
 8002fbc:	2a09      	cmp	r2, #9
 8002fbe:	d903      	bls.n	8002fc8 <_vfiprintf_r+0x1d0>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0c6      	beq.n	8002f52 <_vfiprintf_r+0x15a>
 8002fc4:	9105      	str	r1, [sp, #20]
 8002fc6:	e7c4      	b.n	8002f52 <_vfiprintf_r+0x15a>
 8002fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fcc:	4604      	mov	r4, r0
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e7f0      	b.n	8002fb4 <_vfiprintf_r+0x1bc>
 8002fd2:	ab03      	add	r3, sp, #12
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <_vfiprintf_r+0x22c>)
 8002fda:	a904      	add	r1, sp, #16
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f3af 8000 	nop.w
 8002fe2:	4607      	mov	r7, r0
 8002fe4:	1c78      	adds	r0, r7, #1
 8002fe6:	d1d6      	bne.n	8002f96 <_vfiprintf_r+0x19e>
 8002fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fea:	07d9      	lsls	r1, r3, #31
 8002fec:	d405      	bmi.n	8002ffa <_vfiprintf_r+0x202>
 8002fee:	89ab      	ldrh	r3, [r5, #12]
 8002ff0:	059a      	lsls	r2, r3, #22
 8002ff2:	d402      	bmi.n	8002ffa <_vfiprintf_r+0x202>
 8002ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ff6:	f7ff fed5 	bl	8002da4 <__retarget_lock_release_recursive>
 8002ffa:	89ab      	ldrh	r3, [r5, #12]
 8002ffc:	065b      	lsls	r3, r3, #25
 8002ffe:	f53f af1d 	bmi.w	8002e3c <_vfiprintf_r+0x44>
 8003002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003004:	e71c      	b.n	8002e40 <_vfiprintf_r+0x48>
 8003006:	ab03      	add	r3, sp, #12
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	462a      	mov	r2, r5
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <_vfiprintf_r+0x22c>)
 800300e:	a904      	add	r1, sp, #16
 8003010:	4630      	mov	r0, r6
 8003012:	f000 f919 	bl	8003248 <_printf_i>
 8003016:	e7e4      	b.n	8002fe2 <_vfiprintf_r+0x1ea>
 8003018:	08003a38 	.word	0x08003a38
 800301c:	08003a42 	.word	0x08003a42
 8003020:	00000000 	.word	0x00000000
 8003024:	08002dd5 	.word	0x08002dd5
 8003028:	08003a3e 	.word	0x08003a3e

0800302c <sbrk_aligned>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0e      	ldr	r6, [pc, #56]	; (8003068 <sbrk_aligned+0x3c>)
 8003030:	460c      	mov	r4, r1
 8003032:	6831      	ldr	r1, [r6, #0]
 8003034:	4605      	mov	r5, r0
 8003036:	b911      	cbnz	r1, 800303e <sbrk_aligned+0x12>
 8003038:	f000 fc72 	bl	8003920 <_sbrk_r>
 800303c:	6030      	str	r0, [r6, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fc6d 	bl	8003920 <_sbrk_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d00a      	beq.n	8003060 <sbrk_aligned+0x34>
 800304a:	1cc4      	adds	r4, r0, #3
 800304c:	f024 0403 	bic.w	r4, r4, #3
 8003050:	42a0      	cmp	r0, r4
 8003052:	d007      	beq.n	8003064 <sbrk_aligned+0x38>
 8003054:	1a21      	subs	r1, r4, r0
 8003056:	4628      	mov	r0, r5
 8003058:	f000 fc62 	bl	8003920 <_sbrk_r>
 800305c:	3001      	adds	r0, #1
 800305e:	d101      	bne.n	8003064 <sbrk_aligned+0x38>
 8003060:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003064:	4620      	mov	r0, r4
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	2000021c 	.word	0x2000021c

0800306c <_malloc_r>:
 800306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003070:	1ccd      	adds	r5, r1, #3
 8003072:	f025 0503 	bic.w	r5, r5, #3
 8003076:	3508      	adds	r5, #8
 8003078:	2d0c      	cmp	r5, #12
 800307a:	bf38      	it	cc
 800307c:	250c      	movcc	r5, #12
 800307e:	2d00      	cmp	r5, #0
 8003080:	4607      	mov	r7, r0
 8003082:	db01      	blt.n	8003088 <_malloc_r+0x1c>
 8003084:	42a9      	cmp	r1, r5
 8003086:	d905      	bls.n	8003094 <_malloc_r+0x28>
 8003088:	230c      	movs	r3, #12
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	2600      	movs	r6, #0
 800308e:	4630      	mov	r0, r6
 8003090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003168 <_malloc_r+0xfc>
 8003098:	f000 faa6 	bl	80035e8 <__malloc_lock>
 800309c:	f8d8 3000 	ldr.w	r3, [r8]
 80030a0:	461c      	mov	r4, r3
 80030a2:	bb5c      	cbnz	r4, 80030fc <_malloc_r+0x90>
 80030a4:	4629      	mov	r1, r5
 80030a6:	4638      	mov	r0, r7
 80030a8:	f7ff ffc0 	bl	800302c <sbrk_aligned>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	4604      	mov	r4, r0
 80030b0:	d155      	bne.n	800315e <_malloc_r+0xf2>
 80030b2:	f8d8 4000 	ldr.w	r4, [r8]
 80030b6:	4626      	mov	r6, r4
 80030b8:	2e00      	cmp	r6, #0
 80030ba:	d145      	bne.n	8003148 <_malloc_r+0xdc>
 80030bc:	2c00      	cmp	r4, #0
 80030be:	d048      	beq.n	8003152 <_malloc_r+0xe6>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	4631      	mov	r1, r6
 80030c4:	4638      	mov	r0, r7
 80030c6:	eb04 0903 	add.w	r9, r4, r3
 80030ca:	f000 fc29 	bl	8003920 <_sbrk_r>
 80030ce:	4581      	cmp	r9, r0
 80030d0:	d13f      	bne.n	8003152 <_malloc_r+0xe6>
 80030d2:	6821      	ldr	r1, [r4, #0]
 80030d4:	1a6d      	subs	r5, r5, r1
 80030d6:	4629      	mov	r1, r5
 80030d8:	4638      	mov	r0, r7
 80030da:	f7ff ffa7 	bl	800302c <sbrk_aligned>
 80030de:	3001      	adds	r0, #1
 80030e0:	d037      	beq.n	8003152 <_malloc_r+0xe6>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	442b      	add	r3, r5
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	f8d8 3000 	ldr.w	r3, [r8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d038      	beq.n	8003162 <_malloc_r+0xf6>
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	42a2      	cmp	r2, r4
 80030f4:	d12b      	bne.n	800314e <_malloc_r+0xe2>
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e00f      	b.n	800311c <_malloc_r+0xb0>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	1b52      	subs	r2, r2, r5
 8003100:	d41f      	bmi.n	8003142 <_malloc_r+0xd6>
 8003102:	2a0b      	cmp	r2, #11
 8003104:	d917      	bls.n	8003136 <_malloc_r+0xca>
 8003106:	1961      	adds	r1, r4, r5
 8003108:	42a3      	cmp	r3, r4
 800310a:	6025      	str	r5, [r4, #0]
 800310c:	bf18      	it	ne
 800310e:	6059      	strne	r1, [r3, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	bf08      	it	eq
 8003114:	f8c8 1000 	streq.w	r1, [r8]
 8003118:	5162      	str	r2, [r4, r5]
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	4638      	mov	r0, r7
 800311e:	f104 060b 	add.w	r6, r4, #11
 8003122:	f000 fa67 	bl	80035f4 <__malloc_unlock>
 8003126:	f026 0607 	bic.w	r6, r6, #7
 800312a:	1d23      	adds	r3, r4, #4
 800312c:	1af2      	subs	r2, r6, r3
 800312e:	d0ae      	beq.n	800308e <_malloc_r+0x22>
 8003130:	1b9b      	subs	r3, r3, r6
 8003132:	50a3      	str	r3, [r4, r2]
 8003134:	e7ab      	b.n	800308e <_malloc_r+0x22>
 8003136:	42a3      	cmp	r3, r4
 8003138:	6862      	ldr	r2, [r4, #4]
 800313a:	d1dd      	bne.n	80030f8 <_malloc_r+0x8c>
 800313c:	f8c8 2000 	str.w	r2, [r8]
 8003140:	e7ec      	b.n	800311c <_malloc_r+0xb0>
 8003142:	4623      	mov	r3, r4
 8003144:	6864      	ldr	r4, [r4, #4]
 8003146:	e7ac      	b.n	80030a2 <_malloc_r+0x36>
 8003148:	4634      	mov	r4, r6
 800314a:	6876      	ldr	r6, [r6, #4]
 800314c:	e7b4      	b.n	80030b8 <_malloc_r+0x4c>
 800314e:	4613      	mov	r3, r2
 8003150:	e7cc      	b.n	80030ec <_malloc_r+0x80>
 8003152:	230c      	movs	r3, #12
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4638      	mov	r0, r7
 8003158:	f000 fa4c 	bl	80035f4 <__malloc_unlock>
 800315c:	e797      	b.n	800308e <_malloc_r+0x22>
 800315e:	6025      	str	r5, [r4, #0]
 8003160:	e7dc      	b.n	800311c <_malloc_r+0xb0>
 8003162:	605b      	str	r3, [r3, #4]
 8003164:	deff      	udf	#255	; 0xff
 8003166:	bf00      	nop
 8003168:	20000218 	.word	0x20000218

0800316c <_printf_common>:
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	4616      	mov	r6, r2
 8003172:	4699      	mov	r9, r3
 8003174:	688a      	ldr	r2, [r1, #8]
 8003176:	690b      	ldr	r3, [r1, #16]
 8003178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800317c:	4293      	cmp	r3, r2
 800317e:	bfb8      	it	lt
 8003180:	4613      	movlt	r3, r2
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003188:	4607      	mov	r7, r0
 800318a:	460c      	mov	r4, r1
 800318c:	b10a      	cbz	r2, 8003192 <_printf_common+0x26>
 800318e:	3301      	adds	r3, #1
 8003190:	6033      	str	r3, [r6, #0]
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	0699      	lsls	r1, r3, #26
 8003196:	bf42      	ittt	mi
 8003198:	6833      	ldrmi	r3, [r6, #0]
 800319a:	3302      	addmi	r3, #2
 800319c:	6033      	strmi	r3, [r6, #0]
 800319e:	6825      	ldr	r5, [r4, #0]
 80031a0:	f015 0506 	ands.w	r5, r5, #6
 80031a4:	d106      	bne.n	80031b4 <_printf_common+0x48>
 80031a6:	f104 0a19 	add.w	sl, r4, #25
 80031aa:	68e3      	ldr	r3, [r4, #12]
 80031ac:	6832      	ldr	r2, [r6, #0]
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	42ab      	cmp	r3, r5
 80031b2:	dc26      	bgt.n	8003202 <_printf_common+0x96>
 80031b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031b8:	1e13      	subs	r3, r2, #0
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	bf18      	it	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	0692      	lsls	r2, r2, #26
 80031c2:	d42b      	bmi.n	800321c <_printf_common+0xb0>
 80031c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031c8:	4649      	mov	r1, r9
 80031ca:	4638      	mov	r0, r7
 80031cc:	47c0      	blx	r8
 80031ce:	3001      	adds	r0, #1
 80031d0:	d01e      	beq.n	8003210 <_printf_common+0xa4>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	6922      	ldr	r2, [r4, #16]
 80031d6:	f003 0306 	and.w	r3, r3, #6
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf02      	ittt	eq
 80031de:	68e5      	ldreq	r5, [r4, #12]
 80031e0:	6833      	ldreq	r3, [r6, #0]
 80031e2:	1aed      	subeq	r5, r5, r3
 80031e4:	68a3      	ldr	r3, [r4, #8]
 80031e6:	bf0c      	ite	eq
 80031e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031ec:	2500      	movne	r5, #0
 80031ee:	4293      	cmp	r3, r2
 80031f0:	bfc4      	itt	gt
 80031f2:	1a9b      	subgt	r3, r3, r2
 80031f4:	18ed      	addgt	r5, r5, r3
 80031f6:	2600      	movs	r6, #0
 80031f8:	341a      	adds	r4, #26
 80031fa:	42b5      	cmp	r5, r6
 80031fc:	d11a      	bne.n	8003234 <_printf_common+0xc8>
 80031fe:	2000      	movs	r0, #0
 8003200:	e008      	b.n	8003214 <_printf_common+0xa8>
 8003202:	2301      	movs	r3, #1
 8003204:	4652      	mov	r2, sl
 8003206:	4649      	mov	r1, r9
 8003208:	4638      	mov	r0, r7
 800320a:	47c0      	blx	r8
 800320c:	3001      	adds	r0, #1
 800320e:	d103      	bne.n	8003218 <_printf_common+0xac>
 8003210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	3501      	adds	r5, #1
 800321a:	e7c6      	b.n	80031aa <_printf_common+0x3e>
 800321c:	18e1      	adds	r1, r4, r3
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	2030      	movs	r0, #48	; 0x30
 8003222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003226:	4422      	add	r2, r4
 8003228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800322c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003230:	3302      	adds	r3, #2
 8003232:	e7c7      	b.n	80031c4 <_printf_common+0x58>
 8003234:	2301      	movs	r3, #1
 8003236:	4622      	mov	r2, r4
 8003238:	4649      	mov	r1, r9
 800323a:	4638      	mov	r0, r7
 800323c:	47c0      	blx	r8
 800323e:	3001      	adds	r0, #1
 8003240:	d0e6      	beq.n	8003210 <_printf_common+0xa4>
 8003242:	3601      	adds	r6, #1
 8003244:	e7d9      	b.n	80031fa <_printf_common+0x8e>
	...

08003248 <_printf_i>:
 8003248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	7e0f      	ldrb	r7, [r1, #24]
 800324e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003250:	2f78      	cmp	r7, #120	; 0x78
 8003252:	4691      	mov	r9, r2
 8003254:	4680      	mov	r8, r0
 8003256:	460c      	mov	r4, r1
 8003258:	469a      	mov	sl, r3
 800325a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800325e:	d807      	bhi.n	8003270 <_printf_i+0x28>
 8003260:	2f62      	cmp	r7, #98	; 0x62
 8003262:	d80a      	bhi.n	800327a <_printf_i+0x32>
 8003264:	2f00      	cmp	r7, #0
 8003266:	f000 80d4 	beq.w	8003412 <_printf_i+0x1ca>
 800326a:	2f58      	cmp	r7, #88	; 0x58
 800326c:	f000 80c0 	beq.w	80033f0 <_printf_i+0x1a8>
 8003270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003278:	e03a      	b.n	80032f0 <_printf_i+0xa8>
 800327a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800327e:	2b15      	cmp	r3, #21
 8003280:	d8f6      	bhi.n	8003270 <_printf_i+0x28>
 8003282:	a101      	add	r1, pc, #4	; (adr r1, 8003288 <_printf_i+0x40>)
 8003284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003288:	080032e1 	.word	0x080032e1
 800328c:	080032f5 	.word	0x080032f5
 8003290:	08003271 	.word	0x08003271
 8003294:	08003271 	.word	0x08003271
 8003298:	08003271 	.word	0x08003271
 800329c:	08003271 	.word	0x08003271
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	08003271 	.word	0x08003271
 80032a8:	08003271 	.word	0x08003271
 80032ac:	08003271 	.word	0x08003271
 80032b0:	08003271 	.word	0x08003271
 80032b4:	080033f9 	.word	0x080033f9
 80032b8:	08003321 	.word	0x08003321
 80032bc:	080033b3 	.word	0x080033b3
 80032c0:	08003271 	.word	0x08003271
 80032c4:	08003271 	.word	0x08003271
 80032c8:	0800341b 	.word	0x0800341b
 80032cc:	08003271 	.word	0x08003271
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003271 	.word	0x08003271
 80032d8:	08003271 	.word	0x08003271
 80032dc:	080033bb 	.word	0x080033bb
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	602a      	str	r2, [r5, #0]
 80032e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032f0:	2301      	movs	r3, #1
 80032f2:	e09f      	b.n	8003434 <_printf_i+0x1ec>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	0607      	lsls	r7, r0, #24
 80032fa:	f103 0104 	add.w	r1, r3, #4
 80032fe:	6029      	str	r1, [r5, #0]
 8003300:	d501      	bpl.n	8003306 <_printf_i+0xbe>
 8003302:	681e      	ldr	r6, [r3, #0]
 8003304:	e003      	b.n	800330e <_printf_i+0xc6>
 8003306:	0646      	lsls	r6, r0, #25
 8003308:	d5fb      	bpl.n	8003302 <_printf_i+0xba>
 800330a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800330e:	2e00      	cmp	r6, #0
 8003310:	da03      	bge.n	800331a <_printf_i+0xd2>
 8003312:	232d      	movs	r3, #45	; 0x2d
 8003314:	4276      	negs	r6, r6
 8003316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800331a:	485a      	ldr	r0, [pc, #360]	; (8003484 <_printf_i+0x23c>)
 800331c:	230a      	movs	r3, #10
 800331e:	e012      	b.n	8003346 <_printf_i+0xfe>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1d19      	adds	r1, r3, #4
 8003326:	6029      	str	r1, [r5, #0]
 8003328:	0605      	lsls	r5, r0, #24
 800332a:	d501      	bpl.n	8003330 <_printf_i+0xe8>
 800332c:	681e      	ldr	r6, [r3, #0]
 800332e:	e002      	b.n	8003336 <_printf_i+0xee>
 8003330:	0641      	lsls	r1, r0, #25
 8003332:	d5fb      	bpl.n	800332c <_printf_i+0xe4>
 8003334:	881e      	ldrh	r6, [r3, #0]
 8003336:	4853      	ldr	r0, [pc, #332]	; (8003484 <_printf_i+0x23c>)
 8003338:	2f6f      	cmp	r7, #111	; 0x6f
 800333a:	bf0c      	ite	eq
 800333c:	2308      	moveq	r3, #8
 800333e:	230a      	movne	r3, #10
 8003340:	2100      	movs	r1, #0
 8003342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003346:	6865      	ldr	r5, [r4, #4]
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	2d00      	cmp	r5, #0
 800334c:	bfa2      	ittt	ge
 800334e:	6821      	ldrge	r1, [r4, #0]
 8003350:	f021 0104 	bicge.w	r1, r1, #4
 8003354:	6021      	strge	r1, [r4, #0]
 8003356:	b90e      	cbnz	r6, 800335c <_printf_i+0x114>
 8003358:	2d00      	cmp	r5, #0
 800335a:	d04b      	beq.n	80033f4 <_printf_i+0x1ac>
 800335c:	4615      	mov	r5, r2
 800335e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003362:	fb03 6711 	mls	r7, r3, r1, r6
 8003366:	5dc7      	ldrb	r7, [r0, r7]
 8003368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800336c:	4637      	mov	r7, r6
 800336e:	42bb      	cmp	r3, r7
 8003370:	460e      	mov	r6, r1
 8003372:	d9f4      	bls.n	800335e <_printf_i+0x116>
 8003374:	2b08      	cmp	r3, #8
 8003376:	d10b      	bne.n	8003390 <_printf_i+0x148>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	07de      	lsls	r6, r3, #31
 800337c:	d508      	bpl.n	8003390 <_printf_i+0x148>
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	6861      	ldr	r1, [r4, #4]
 8003382:	4299      	cmp	r1, r3
 8003384:	bfde      	ittt	le
 8003386:	2330      	movle	r3, #48	; 0x30
 8003388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800338c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003390:	1b52      	subs	r2, r2, r5
 8003392:	6122      	str	r2, [r4, #16]
 8003394:	f8cd a000 	str.w	sl, [sp]
 8003398:	464b      	mov	r3, r9
 800339a:	aa03      	add	r2, sp, #12
 800339c:	4621      	mov	r1, r4
 800339e:	4640      	mov	r0, r8
 80033a0:	f7ff fee4 	bl	800316c <_printf_common>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d14a      	bne.n	800343e <_printf_i+0x1f6>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ac:	b004      	add	sp, #16
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	f043 0320 	orr.w	r3, r3, #32
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	4833      	ldr	r0, [pc, #204]	; (8003488 <_printf_i+0x240>)
 80033bc:	2778      	movs	r7, #120	; 0x78
 80033be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	6829      	ldr	r1, [r5, #0]
 80033c6:	061f      	lsls	r7, r3, #24
 80033c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80033cc:	d402      	bmi.n	80033d4 <_printf_i+0x18c>
 80033ce:	065f      	lsls	r7, r3, #25
 80033d0:	bf48      	it	mi
 80033d2:	b2b6      	uxthmi	r6, r6
 80033d4:	07df      	lsls	r7, r3, #31
 80033d6:	bf48      	it	mi
 80033d8:	f043 0320 	orrmi.w	r3, r3, #32
 80033dc:	6029      	str	r1, [r5, #0]
 80033de:	bf48      	it	mi
 80033e0:	6023      	strmi	r3, [r4, #0]
 80033e2:	b91e      	cbnz	r6, 80033ec <_printf_i+0x1a4>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f023 0320 	bic.w	r3, r3, #32
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	2310      	movs	r3, #16
 80033ee:	e7a7      	b.n	8003340 <_printf_i+0xf8>
 80033f0:	4824      	ldr	r0, [pc, #144]	; (8003484 <_printf_i+0x23c>)
 80033f2:	e7e4      	b.n	80033be <_printf_i+0x176>
 80033f4:	4615      	mov	r5, r2
 80033f6:	e7bd      	b.n	8003374 <_printf_i+0x12c>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	6826      	ldr	r6, [r4, #0]
 80033fc:	6961      	ldr	r1, [r4, #20]
 80033fe:	1d18      	adds	r0, r3, #4
 8003400:	6028      	str	r0, [r5, #0]
 8003402:	0635      	lsls	r5, r6, #24
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	d501      	bpl.n	800340c <_printf_i+0x1c4>
 8003408:	6019      	str	r1, [r3, #0]
 800340a:	e002      	b.n	8003412 <_printf_i+0x1ca>
 800340c:	0670      	lsls	r0, r6, #25
 800340e:	d5fb      	bpl.n	8003408 <_printf_i+0x1c0>
 8003410:	8019      	strh	r1, [r3, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	6123      	str	r3, [r4, #16]
 8003416:	4615      	mov	r5, r2
 8003418:	e7bc      	b.n	8003394 <_printf_i+0x14c>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	1d1a      	adds	r2, r3, #4
 800341e:	602a      	str	r2, [r5, #0]
 8003420:	681d      	ldr	r5, [r3, #0]
 8003422:	6862      	ldr	r2, [r4, #4]
 8003424:	2100      	movs	r1, #0
 8003426:	4628      	mov	r0, r5
 8003428:	f7fc fed2 	bl	80001d0 <memchr>
 800342c:	b108      	cbz	r0, 8003432 <_printf_i+0x1ea>
 800342e:	1b40      	subs	r0, r0, r5
 8003430:	6060      	str	r0, [r4, #4]
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	2300      	movs	r3, #0
 8003438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800343c:	e7aa      	b.n	8003394 <_printf_i+0x14c>
 800343e:	6923      	ldr	r3, [r4, #16]
 8003440:	462a      	mov	r2, r5
 8003442:	4649      	mov	r1, r9
 8003444:	4640      	mov	r0, r8
 8003446:	47d0      	blx	sl
 8003448:	3001      	adds	r0, #1
 800344a:	d0ad      	beq.n	80033a8 <_printf_i+0x160>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	079b      	lsls	r3, r3, #30
 8003450:	d413      	bmi.n	800347a <_printf_i+0x232>
 8003452:	68e0      	ldr	r0, [r4, #12]
 8003454:	9b03      	ldr	r3, [sp, #12]
 8003456:	4298      	cmp	r0, r3
 8003458:	bfb8      	it	lt
 800345a:	4618      	movlt	r0, r3
 800345c:	e7a6      	b.n	80033ac <_printf_i+0x164>
 800345e:	2301      	movs	r3, #1
 8003460:	4632      	mov	r2, r6
 8003462:	4649      	mov	r1, r9
 8003464:	4640      	mov	r0, r8
 8003466:	47d0      	blx	sl
 8003468:	3001      	adds	r0, #1
 800346a:	d09d      	beq.n	80033a8 <_printf_i+0x160>
 800346c:	3501      	adds	r5, #1
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	9903      	ldr	r1, [sp, #12]
 8003472:	1a5b      	subs	r3, r3, r1
 8003474:	42ab      	cmp	r3, r5
 8003476:	dcf2      	bgt.n	800345e <_printf_i+0x216>
 8003478:	e7eb      	b.n	8003452 <_printf_i+0x20a>
 800347a:	2500      	movs	r5, #0
 800347c:	f104 0619 	add.w	r6, r4, #25
 8003480:	e7f5      	b.n	800346e <_printf_i+0x226>
 8003482:	bf00      	nop
 8003484:	08003a49 	.word	0x08003a49
 8003488:	08003a5a 	.word	0x08003a5a

0800348c <__sflush_r>:
 800348c:	898a      	ldrh	r2, [r1, #12]
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	4605      	mov	r5, r0
 8003494:	0710      	lsls	r0, r2, #28
 8003496:	460c      	mov	r4, r1
 8003498:	d458      	bmi.n	800354c <__sflush_r+0xc0>
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dc05      	bgt.n	80034ac <__sflush_r+0x20>
 80034a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dc02      	bgt.n	80034ac <__sflush_r+0x20>
 80034a6:	2000      	movs	r0, #0
 80034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d0f9      	beq.n	80034a6 <__sflush_r+0x1a>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034b8:	682f      	ldr	r7, [r5, #0]
 80034ba:	6a21      	ldr	r1, [r4, #32]
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	d032      	beq.n	8003526 <__sflush_r+0x9a>
 80034c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	075a      	lsls	r2, r3, #29
 80034c6:	d505      	bpl.n	80034d4 <__sflush_r+0x48>
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	1ac0      	subs	r0, r0, r3
 80034cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ce:	b10b      	cbz	r3, 80034d4 <__sflush_r+0x48>
 80034d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d2:	1ac0      	subs	r0, r0, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	4602      	mov	r2, r0
 80034d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034da:	6a21      	ldr	r1, [r4, #32]
 80034dc:	4628      	mov	r0, r5
 80034de:	47b0      	blx	r6
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	d106      	bne.n	80034f4 <__sflush_r+0x68>
 80034e6:	6829      	ldr	r1, [r5, #0]
 80034e8:	291d      	cmp	r1, #29
 80034ea:	d82b      	bhi.n	8003544 <__sflush_r+0xb8>
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <__sflush_r+0x108>)
 80034ee:	410a      	asrs	r2, r1
 80034f0:	07d6      	lsls	r6, r2, #31
 80034f2:	d427      	bmi.n	8003544 <__sflush_r+0xb8>
 80034f4:	2200      	movs	r2, #0
 80034f6:	6062      	str	r2, [r4, #4]
 80034f8:	04d9      	lsls	r1, r3, #19
 80034fa:	6922      	ldr	r2, [r4, #16]
 80034fc:	6022      	str	r2, [r4, #0]
 80034fe:	d504      	bpl.n	800350a <__sflush_r+0x7e>
 8003500:	1c42      	adds	r2, r0, #1
 8003502:	d101      	bne.n	8003508 <__sflush_r+0x7c>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b903      	cbnz	r3, 800350a <__sflush_r+0x7e>
 8003508:	6560      	str	r0, [r4, #84]	; 0x54
 800350a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350c:	602f      	str	r7, [r5, #0]
 800350e:	2900      	cmp	r1, #0
 8003510:	d0c9      	beq.n	80034a6 <__sflush_r+0x1a>
 8003512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003516:	4299      	cmp	r1, r3
 8003518:	d002      	beq.n	8003520 <__sflush_r+0x94>
 800351a:	4628      	mov	r0, r5
 800351c:	f000 fa22 	bl	8003964 <_free_r>
 8003520:	2000      	movs	r0, #0
 8003522:	6360      	str	r0, [r4, #52]	; 0x34
 8003524:	e7c0      	b.n	80034a8 <__sflush_r+0x1c>
 8003526:	2301      	movs	r3, #1
 8003528:	4628      	mov	r0, r5
 800352a:	47b0      	blx	r6
 800352c:	1c41      	adds	r1, r0, #1
 800352e:	d1c8      	bne.n	80034c2 <__sflush_r+0x36>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0c5      	beq.n	80034c2 <__sflush_r+0x36>
 8003536:	2b1d      	cmp	r3, #29
 8003538:	d001      	beq.n	800353e <__sflush_r+0xb2>
 800353a:	2b16      	cmp	r3, #22
 800353c:	d101      	bne.n	8003542 <__sflush_r+0xb6>
 800353e:	602f      	str	r7, [r5, #0]
 8003540:	e7b1      	b.n	80034a6 <__sflush_r+0x1a>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	e7ad      	b.n	80034a8 <__sflush_r+0x1c>
 800354c:	690f      	ldr	r7, [r1, #16]
 800354e:	2f00      	cmp	r7, #0
 8003550:	d0a9      	beq.n	80034a6 <__sflush_r+0x1a>
 8003552:	0793      	lsls	r3, r2, #30
 8003554:	680e      	ldr	r6, [r1, #0]
 8003556:	bf08      	it	eq
 8003558:	694b      	ldreq	r3, [r1, #20]
 800355a:	600f      	str	r7, [r1, #0]
 800355c:	bf18      	it	ne
 800355e:	2300      	movne	r3, #0
 8003560:	eba6 0807 	sub.w	r8, r6, r7
 8003564:	608b      	str	r3, [r1, #8]
 8003566:	f1b8 0f00 	cmp.w	r8, #0
 800356a:	dd9c      	ble.n	80034a6 <__sflush_r+0x1a>
 800356c:	6a21      	ldr	r1, [r4, #32]
 800356e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003570:	4643      	mov	r3, r8
 8003572:	463a      	mov	r2, r7
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	2800      	cmp	r0, #0
 800357a:	dc06      	bgt.n	800358a <__sflush_r+0xfe>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003588:	e78e      	b.n	80034a8 <__sflush_r+0x1c>
 800358a:	4407      	add	r7, r0
 800358c:	eba8 0800 	sub.w	r8, r8, r0
 8003590:	e7e9      	b.n	8003566 <__sflush_r+0xda>
 8003592:	bf00      	nop
 8003594:	dfbffffe 	.word	0xdfbffffe

08003598 <_fflush_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	690b      	ldr	r3, [r1, #16]
 800359c:	4605      	mov	r5, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	b913      	cbnz	r3, 80035a8 <_fflush_r+0x10>
 80035a2:	2500      	movs	r5, #0
 80035a4:	4628      	mov	r0, r5
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	b118      	cbz	r0, 80035b2 <_fflush_r+0x1a>
 80035aa:	6a03      	ldr	r3, [r0, #32]
 80035ac:	b90b      	cbnz	r3, 80035b2 <_fflush_r+0x1a>
 80035ae:	f7ff fb7d 	bl	8002cac <__sinit>
 80035b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f3      	beq.n	80035a2 <_fflush_r+0xa>
 80035ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035bc:	07d0      	lsls	r0, r2, #31
 80035be:	d404      	bmi.n	80035ca <_fflush_r+0x32>
 80035c0:	0599      	lsls	r1, r3, #22
 80035c2:	d402      	bmi.n	80035ca <_fflush_r+0x32>
 80035c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c6:	f7ff fbec 	bl	8002da2 <__retarget_lock_acquire_recursive>
 80035ca:	4628      	mov	r0, r5
 80035cc:	4621      	mov	r1, r4
 80035ce:	f7ff ff5d 	bl	800348c <__sflush_r>
 80035d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d4:	07da      	lsls	r2, r3, #31
 80035d6:	4605      	mov	r5, r0
 80035d8:	d4e4      	bmi.n	80035a4 <_fflush_r+0xc>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	059b      	lsls	r3, r3, #22
 80035de:	d4e1      	bmi.n	80035a4 <_fflush_r+0xc>
 80035e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e2:	f7ff fbdf 	bl	8002da4 <__retarget_lock_release_recursive>
 80035e6:	e7dd      	b.n	80035a4 <_fflush_r+0xc>

080035e8 <__malloc_lock>:
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <__malloc_lock+0x8>)
 80035ea:	f7ff bbda 	b.w	8002da2 <__retarget_lock_acquire_recursive>
 80035ee:	bf00      	nop
 80035f0:	20000214 	.word	0x20000214

080035f4 <__malloc_unlock>:
 80035f4:	4801      	ldr	r0, [pc, #4]	; (80035fc <__malloc_unlock+0x8>)
 80035f6:	f7ff bbd5 	b.w	8002da4 <__retarget_lock_release_recursive>
 80035fa:	bf00      	nop
 80035fc:	20000214 	.word	0x20000214

08003600 <__sread>:
 8003600:	b510      	push	{r4, lr}
 8003602:	460c      	mov	r4, r1
 8003604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003608:	f000 f978 	bl	80038fc <_read_r>
 800360c:	2800      	cmp	r0, #0
 800360e:	bfab      	itete	ge
 8003610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003612:	89a3      	ldrhlt	r3, [r4, #12]
 8003614:	181b      	addge	r3, r3, r0
 8003616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800361a:	bfac      	ite	ge
 800361c:	6563      	strge	r3, [r4, #84]	; 0x54
 800361e:	81a3      	strhlt	r3, [r4, #12]
 8003620:	bd10      	pop	{r4, pc}

08003622 <__swrite>:
 8003622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	461f      	mov	r7, r3
 8003628:	898b      	ldrh	r3, [r1, #12]
 800362a:	05db      	lsls	r3, r3, #23
 800362c:	4605      	mov	r5, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4616      	mov	r6, r2
 8003632:	d505      	bpl.n	8003640 <__swrite+0x1e>
 8003634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003638:	2302      	movs	r3, #2
 800363a:	2200      	movs	r2, #0
 800363c:	f000 f94c 	bl	80038d8 <_lseek_r>
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800364a:	81a3      	strh	r3, [r4, #12]
 800364c:	4632      	mov	r2, r6
 800364e:	463b      	mov	r3, r7
 8003650:	4628      	mov	r0, r5
 8003652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003656:	f000 b973 	b.w	8003940 <_write_r>

0800365a <__sseek>:
 800365a:	b510      	push	{r4, lr}
 800365c:	460c      	mov	r4, r1
 800365e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003662:	f000 f939 	bl	80038d8 <_lseek_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	bf15      	itete	ne
 800366c:	6560      	strne	r0, [r4, #84]	; 0x54
 800366e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003676:	81a3      	strheq	r3, [r4, #12]
 8003678:	bf18      	it	ne
 800367a:	81a3      	strhne	r3, [r4, #12]
 800367c:	bd10      	pop	{r4, pc}

0800367e <__sclose>:
 800367e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003682:	f000 b8f7 	b.w	8003874 <_close_r>

08003686 <__swbuf_r>:
 8003686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003688:	460e      	mov	r6, r1
 800368a:	4614      	mov	r4, r2
 800368c:	4605      	mov	r5, r0
 800368e:	b118      	cbz	r0, 8003698 <__swbuf_r+0x12>
 8003690:	6a03      	ldr	r3, [r0, #32]
 8003692:	b90b      	cbnz	r3, 8003698 <__swbuf_r+0x12>
 8003694:	f7ff fb0a 	bl	8002cac <__sinit>
 8003698:	69a3      	ldr	r3, [r4, #24]
 800369a:	60a3      	str	r3, [r4, #8]
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	071a      	lsls	r2, r3, #28
 80036a0:	d525      	bpl.n	80036ee <__swbuf_r+0x68>
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b31b      	cbz	r3, 80036ee <__swbuf_r+0x68>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	1a98      	subs	r0, r3, r2
 80036ac:	6963      	ldr	r3, [r4, #20]
 80036ae:	b2f6      	uxtb	r6, r6
 80036b0:	4283      	cmp	r3, r0
 80036b2:	4637      	mov	r7, r6
 80036b4:	dc04      	bgt.n	80036c0 <__swbuf_r+0x3a>
 80036b6:	4621      	mov	r1, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	f7ff ff6d 	bl	8003598 <_fflush_r>
 80036be:	b9e0      	cbnz	r0, 80036fa <__swbuf_r+0x74>
 80036c0:	68a3      	ldr	r3, [r4, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	6022      	str	r2, [r4, #0]
 80036cc:	701e      	strb	r6, [r3, #0]
 80036ce:	6962      	ldr	r2, [r4, #20]
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d004      	beq.n	80036e0 <__swbuf_r+0x5a>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	07db      	lsls	r3, r3, #31
 80036da:	d506      	bpl.n	80036ea <__swbuf_r+0x64>
 80036dc:	2e0a      	cmp	r6, #10
 80036de:	d104      	bne.n	80036ea <__swbuf_r+0x64>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7ff ff58 	bl	8003598 <_fflush_r>
 80036e8:	b938      	cbnz	r0, 80036fa <__swbuf_r+0x74>
 80036ea:	4638      	mov	r0, r7
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f805 	bl	8003700 <__swsetup_r>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d0d5      	beq.n	80036a6 <__swbuf_r+0x20>
 80036fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80036fe:	e7f4      	b.n	80036ea <__swbuf_r+0x64>

08003700 <__swsetup_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <__swsetup_r+0xac>)
 8003704:	4605      	mov	r5, r0
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	460c      	mov	r4, r1
 800370a:	b118      	cbz	r0, 8003714 <__swsetup_r+0x14>
 800370c:	6a03      	ldr	r3, [r0, #32]
 800370e:	b90b      	cbnz	r3, 8003714 <__swsetup_r+0x14>
 8003710:	f7ff facc 	bl	8002cac <__sinit>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800371a:	0718      	lsls	r0, r3, #28
 800371c:	d422      	bmi.n	8003764 <__swsetup_r+0x64>
 800371e:	06d9      	lsls	r1, r3, #27
 8003720:	d407      	bmi.n	8003732 <__swsetup_r+0x32>
 8003722:	2309      	movs	r3, #9
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800372a:	81a3      	strh	r3, [r4, #12]
 800372c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003730:	e034      	b.n	800379c <__swsetup_r+0x9c>
 8003732:	0758      	lsls	r0, r3, #29
 8003734:	d512      	bpl.n	800375c <__swsetup_r+0x5c>
 8003736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003738:	b141      	cbz	r1, 800374c <__swsetup_r+0x4c>
 800373a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800373e:	4299      	cmp	r1, r3
 8003740:	d002      	beq.n	8003748 <__swsetup_r+0x48>
 8003742:	4628      	mov	r0, r5
 8003744:	f000 f90e 	bl	8003964 <_free_r>
 8003748:	2300      	movs	r3, #0
 800374a:	6363      	str	r3, [r4, #52]	; 0x34
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	2300      	movs	r3, #0
 8003756:	6063      	str	r3, [r4, #4]
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	6023      	str	r3, [r4, #0]
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	f043 0308 	orr.w	r3, r3, #8
 8003762:	81a3      	strh	r3, [r4, #12]
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	b94b      	cbnz	r3, 800377c <__swsetup_r+0x7c>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d003      	beq.n	800377c <__swsetup_r+0x7c>
 8003774:	4621      	mov	r1, r4
 8003776:	4628      	mov	r0, r5
 8003778:	f000 f840 	bl	80037fc <__smakebuf_r>
 800377c:	89a0      	ldrh	r0, [r4, #12]
 800377e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003782:	f010 0301 	ands.w	r3, r0, #1
 8003786:	d00a      	beq.n	800379e <__swsetup_r+0x9e>
 8003788:	2300      	movs	r3, #0
 800378a:	60a3      	str	r3, [r4, #8]
 800378c:	6963      	ldr	r3, [r4, #20]
 800378e:	425b      	negs	r3, r3
 8003790:	61a3      	str	r3, [r4, #24]
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	b943      	cbnz	r3, 80037a8 <__swsetup_r+0xa8>
 8003796:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800379a:	d1c4      	bne.n	8003726 <__swsetup_r+0x26>
 800379c:	bd38      	pop	{r3, r4, r5, pc}
 800379e:	0781      	lsls	r1, r0, #30
 80037a0:	bf58      	it	pl
 80037a2:	6963      	ldrpl	r3, [r4, #20]
 80037a4:	60a3      	str	r3, [r4, #8]
 80037a6:	e7f4      	b.n	8003792 <__swsetup_r+0x92>
 80037a8:	2000      	movs	r0, #0
 80037aa:	e7f7      	b.n	800379c <__swsetup_r+0x9c>
 80037ac:	20000064 	.word	0x20000064

080037b0 <__swhatbuf_r>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	460c      	mov	r4, r1
 80037b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b8:	2900      	cmp	r1, #0
 80037ba:	b096      	sub	sp, #88	; 0x58
 80037bc:	4615      	mov	r5, r2
 80037be:	461e      	mov	r6, r3
 80037c0:	da0d      	bge.n	80037de <__swhatbuf_r+0x2e>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	bf0c      	ite	eq
 80037ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037d2:	2340      	movne	r3, #64	; 0x40
 80037d4:	2000      	movs	r0, #0
 80037d6:	6031      	str	r1, [r6, #0]
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	b016      	add	sp, #88	; 0x58
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	466a      	mov	r2, sp
 80037e0:	f000 f858 	bl	8003894 <_fstat_r>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	dbec      	blt.n	80037c2 <__swhatbuf_r+0x12>
 80037e8:	9901      	ldr	r1, [sp, #4]
 80037ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037f2:	4259      	negs	r1, r3
 80037f4:	4159      	adcs	r1, r3
 80037f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fa:	e7eb      	b.n	80037d4 <__swhatbuf_r+0x24>

080037fc <__smakebuf_r>:
 80037fc:	898b      	ldrh	r3, [r1, #12]
 80037fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003800:	079d      	lsls	r5, r3, #30
 8003802:	4606      	mov	r6, r0
 8003804:	460c      	mov	r4, r1
 8003806:	d507      	bpl.n	8003818 <__smakebuf_r+0x1c>
 8003808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	2301      	movs	r3, #1
 8003812:	6163      	str	r3, [r4, #20]
 8003814:	b002      	add	sp, #8
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	ab01      	add	r3, sp, #4
 800381a:	466a      	mov	r2, sp
 800381c:	f7ff ffc8 	bl	80037b0 <__swhatbuf_r>
 8003820:	9900      	ldr	r1, [sp, #0]
 8003822:	4605      	mov	r5, r0
 8003824:	4630      	mov	r0, r6
 8003826:	f7ff fc21 	bl	800306c <_malloc_r>
 800382a:	b948      	cbnz	r0, 8003840 <__smakebuf_r+0x44>
 800382c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003830:	059a      	lsls	r2, r3, #22
 8003832:	d4ef      	bmi.n	8003814 <__smakebuf_r+0x18>
 8003834:	f023 0303 	bic.w	r3, r3, #3
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	e7e3      	b.n	8003808 <__smakebuf_r+0xc>
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	9b00      	ldr	r3, [sp, #0]
 800384c:	6163      	str	r3, [r4, #20]
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	6120      	str	r0, [r4, #16]
 8003852:	b15b      	cbz	r3, 800386c <__smakebuf_r+0x70>
 8003854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003858:	4630      	mov	r0, r6
 800385a:	f000 f82d 	bl	80038b8 <_isatty_r>
 800385e:	b128      	cbz	r0, 800386c <__smakebuf_r+0x70>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	431d      	orrs	r5, r3
 8003870:	81a5      	strh	r5, [r4, #12]
 8003872:	e7cf      	b.n	8003814 <__smakebuf_r+0x18>

08003874 <_close_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4d06      	ldr	r5, [pc, #24]	; (8003890 <_close_r+0x1c>)
 8003878:	2300      	movs	r3, #0
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	602b      	str	r3, [r5, #0]
 8003880:	f7fd f8db 	bl	8000a3a <_close>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d102      	bne.n	800388e <_close_r+0x1a>
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	b103      	cbz	r3, 800388e <_close_r+0x1a>
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	20000220 	.word	0x20000220

08003894 <_fstat_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4d07      	ldr	r5, [pc, #28]	; (80038b4 <_fstat_r+0x20>)
 8003898:	2300      	movs	r3, #0
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	f7fd f8d6 	bl	8000a52 <_fstat>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d102      	bne.n	80038b0 <_fstat_r+0x1c>
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	b103      	cbz	r3, 80038b0 <_fstat_r+0x1c>
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	bd38      	pop	{r3, r4, r5, pc}
 80038b2:	bf00      	nop
 80038b4:	20000220 	.word	0x20000220

080038b8 <_isatty_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d06      	ldr	r5, [pc, #24]	; (80038d4 <_isatty_r+0x1c>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	f7fd f8d5 	bl	8000a72 <_isatty>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_isatty_r+0x1a>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_isatty_r+0x1a>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	20000220 	.word	0x20000220

080038d8 <_lseek_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4d07      	ldr	r5, [pc, #28]	; (80038f8 <_lseek_r+0x20>)
 80038dc:	4604      	mov	r4, r0
 80038de:	4608      	mov	r0, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	2200      	movs	r2, #0
 80038e4:	602a      	str	r2, [r5, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f7fd f8ce 	bl	8000a88 <_lseek>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d102      	bne.n	80038f6 <_lseek_r+0x1e>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b103      	cbz	r3, 80038f6 <_lseek_r+0x1e>
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	20000220 	.word	0x20000220

080038fc <_read_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4d07      	ldr	r5, [pc, #28]	; (800391c <_read_r+0x20>)
 8003900:	4604      	mov	r4, r0
 8003902:	4608      	mov	r0, r1
 8003904:	4611      	mov	r1, r2
 8003906:	2200      	movs	r2, #0
 8003908:	602a      	str	r2, [r5, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f7fd f878 	bl	8000a00 <_read>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_read_r+0x1e>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_read_r+0x1e>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	20000220 	.word	0x20000220

08003920 <_sbrk_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d06      	ldr	r5, [pc, #24]	; (800393c <_sbrk_r+0x1c>)
 8003924:	2300      	movs	r3, #0
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd f8ba 	bl	8000aa4 <_sbrk>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_sbrk_r+0x1a>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_sbrk_r+0x1a>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	20000220 	.word	0x20000220

08003940 <_write_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d07      	ldr	r5, [pc, #28]	; (8003960 <_write_r+0x20>)
 8003944:	4604      	mov	r4, r0
 8003946:	4608      	mov	r0, r1
 8003948:	4611      	mov	r1, r2
 800394a:	2200      	movs	r2, #0
 800394c:	602a      	str	r2, [r5, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	f7fc fe33 	bl	80005ba <_write>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_write_r+0x1e>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_write_r+0x1e>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	20000220 	.word	0x20000220

08003964 <_free_r>:
 8003964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003966:	2900      	cmp	r1, #0
 8003968:	d044      	beq.n	80039f4 <_free_r+0x90>
 800396a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396e:	9001      	str	r0, [sp, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f1a1 0404 	sub.w	r4, r1, #4
 8003976:	bfb8      	it	lt
 8003978:	18e4      	addlt	r4, r4, r3
 800397a:	f7ff fe35 	bl	80035e8 <__malloc_lock>
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <_free_r+0x94>)
 8003980:	9801      	ldr	r0, [sp, #4]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x30>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	b003      	add	sp, #12
 800398c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003990:	f7ff be30 	b.w	80035f4 <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x46>
 8003998:	6825      	ldr	r5, [r4, #0]
 800399a:	1961      	adds	r1, r4, r5
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1949      	addeq	r1, r1, r5
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x22>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x50>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x46>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1855      	adds	r5, r2, r1
 80039b8:	42a5      	cmp	r5, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x70>
 80039bc:	6824      	ldr	r4, [r4, #0]
 80039be:	4421      	add	r1, r4
 80039c0:	1854      	adds	r4, r2, r1
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x26>
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	440c      	add	r4, r1
 80039d0:	6014      	str	r4, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x26>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x78>
 80039d6:	230c      	movs	r3, #12
 80039d8:	6003      	str	r3, [r0, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x26>
 80039dc:	6825      	ldr	r5, [r4, #0]
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1949      	addeq	r1, r1, r5
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x26>
 80039f4:	b003      	add	sp, #12
 80039f6:	bd30      	pop	{r4, r5, pc}
 80039f8:	20000218 	.word	0x20000218

080039fc <_init>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr

08003a08 <_fini>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	bf00      	nop
 8003a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0e:	bc08      	pop	{r3}
 8003a10:	469e      	mov	lr, r3
 8003a12:	4770      	bx	lr
